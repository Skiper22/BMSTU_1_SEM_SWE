"""

Теория к РК#3 (лекции 1-16) ver 1_00

!!! Здесь собраны только самые важные определения из курса лекций по Python !!!
!!! Нет полного блока про ООП, т.к его в теории не будет                    !!!
!!! (Не рассмотрены различные модули, т.к количество и объём                !!!
!!!  данного писания резко вырос бы (а он и так не маленький),              !!!
!!!  а нужно ботать Линукс ведь ещё)                                        !!!
!!!  Приветствуются различные корректировки и дополнения (здесь нет АП)     !!!

Компьютер - устройство, способное выполнять заданную, чётко определённую, 
изменяемую последовательность операций (численные расчёты, преобразования данных и т.д.)

Электронно-вычислительная машина - основной вид реализации компьютеров,
который технически выполнен на электронных элементах

Схема ЭВМ: Устройство ввода => Процессор | Память => Устройство вывода

Процессор - интегральная схема, исполняющая машинные инструкции
(код программ), главная часть аппаратного обеспечения компьютера

Машинный код - система команд (набор кодов операций) конкретной 
вычислительной машины, которая интерпретируется непосредственно
процессором. Кодируется в двоичном виде

Файл - поименованное место на диске

Алгоритм - конечная совокупность точно заданных правил решения
некоторого класса задач или набор инструкций, описывающих порядок
действия исполнителя для решения определённой задачи

Исполняемая программа - комбинация компьютерных инструкций и данных,
позволяющая аппаратному обеспечению вычислительной системы выполнять 
вычисления или функции управления

Исходный текст программы - синтаксическая еденица, которая соответствует правилам
определённого языка программирования, состоящая из определений и операторов или инструкций,
необходимых для определённой функции, задачи или решения проблемы

Язык программирования - формальный язык, предназначенный для записи
компьютерных программ. Язык программирования определяет набор лексических,
синтаксических и семантических правил, определяющих действия, которые выполнит ЭВМ под
её управленим 

Способы классификации ЯП:
    -по уровню абстракции
        -низкоуровневые 
        -высокоуровневые
    -по способу выполнения готовой программы
        -компилируемые
        -интерпретируемые
    -по используемой парадигме программирования
        -императивные / процедурные языки
        -аппликативные / функциональные языки
        -языки системы правил / декларативные языки
        -объектно-ориентированные языки

Исполняемый файл - файл, содержащий программу в виде, в котором она
может быть исполнена компьютером (то есть в машинном коде)

** Получение исполняемых файлов требует выполнения компиляции

Компилятор - программа для преобразования исходного текста другой
программы на определённом языке в объектный модуль (файл с машинным кодом)

Python - высокоуровневый язык программирования общего назначения.
Интепретируемый. Является полностью объектно-ориентированным

** -программа
       -модули
           -операторы
               -выражения
                   -объекты

** Символы алфавита любого языка программирования образуют лексемы.
   По умолчанию - кодировка UTF-8

Лексема (token) - это минимальная еденица языка, имеющая самостоятельный смысл.
Лексемы формируют базовый словарь языка, понятный компилятору

Виды лексем:
    -ключевые слова (keywords)
    -идентификаторы (identifires)
    -литералы (literals)
    -операции (operators)
    -знаки пунктуации (разделители, punctuators)

Физическая строка исходного файла - это строка, заканчивающаяся символом
признака конца строки

** Программа Python разделена на несколько логических строк. Логическая строка
   содержит одну или более физических строк, соединяющихся правилами языка.

** Ведущие пробельные символы (пробелы и табуляции) в начале строки
   используются в Python для определения группы инструкций, 
   как единого целого - составной инструкции или блока

** Комментарии в Python начинаются с символа "#"

** Объединение физических строк бывает явное и неявное

Основные типы данных Python:
    -числа
    -строки
    -списки
    -словари
    -кортежи
    -файлы
    -множества
    -прочие основные типы
    -типы программных едениц
    -типы, связанные с реализацией

Литералы:
    * 12
    * 1.75
    * 'abcd'
    * [1, 3, 5, 7]
    * ...

Числовые типы:
    -целые
    -с плавающей запятой
    -комплексные
    -десятичные с фиксируемой точностью
    -рациональные дроби
    -множетва

Приоритеты операций (над числами):
    1. возведение в степень
    2. умножение, деление, взятие остатка
    3. сложение, вычитание
    4. побитовое И
    5. побитовое исключающее ИЛИ
    6. побитовое ИЛИ

Приведение типов данных:
    -Явное
    -Неявное

Переменная - поименованная область памяти, которую можно
использовать для хранения данных и изменять значение в ходе
выполнения программы

Идентификаторы в Python:
    -большие и малые латинские буквы
    -цифры
    -знаки подчёркивания

Логический тип данных:
    -False (0, 0.0)
    -True (остальные числа)

Логические операции:
    -and
    -or
    -not

Операции сравнения:
    * <
    * <=
    * >
    * >=
    * ==
    * !=

Приоритеты операций:
    1. арифметические, побитовые
    2. сравнения
    3. логические

** Оператор присваивания предназначен для связывания имён со значениями
   и для изменения атрибутов или элементов изменяемых объектов. Оператор
   присваивания связывает переменную с объектом (обозначается как "=")

Позиционное присваивание:
    name1, name2, ..., nameN = value1, value2, ..., valueN

Комбинированное присваивание:
    * +=
    * //=
    * >>=
    * и тд.

Условный оператор (if, elif, else):
    -полный
    -неполный

Тернарный оператор:
    x if C else y

    ** Самый низкий приоритет среди всех операций языка

Схемы алгоритмов (картинки смотреть в лекции #3). Применение символов:
    -схема данных
    -схема программы
    -схема работы системы
    -схема взаимодействия программ
    -схема ресурсов системы

Разные стандарты схем:
    -IDEF
    -UML
    -ARIS

Цикл - разновидность управляющей конструкции в высокоуровневых
языках программирования, предназначенная для организации
многократного исполнения набора инструкций

Основные разновидности:
    -бесконечный цикл
    -цикл с предусловием
    -цикл с постусловием
    -цикл со счётчиком

    ** В Python:
           -while
           -for

Оператор break - переходит за пределы ближайшего заключающего цикла
(после всего оператора цикла)

Опертор continue - переходит в начало ближайшего заключающего цикла
(в строку заголовка цикла)

Оператор pass - ничего не делает. Пустой оператор-заполнитель.
Обозначает отсутствие действий в ситуациях, когда синтаксис требует оператора

Часть else - выполняется, если цикл был завершён без прерывания по break.
Особенность Python. Позволяет устранить потребность в дополнительных флагах состояния

** Вложенным циклом называется цикл, организованный внутри тела другого цикла

** Дробные части, не представимые в виде суммы степеней числа 2, 
   хранятся в памяти с округлением => проблема сравнения!

PEP8 (предложения по усовершенствованию кода Python):
    -отступы
    -длина строки
    -пустые строки
    -подключение модулей
    -комментарии
    -именования переменных
    -...

Именование переменны:
    1. из имени переменной должно быть понятно её назначение.
       Имя переменной должно максимально чётко соответствовать
       хранимым в ней данным
    2. имена на английском языке, без транслита
    3. короткие имена допустимы только в коротких фрагментах,
       когда их назначение очевидно
    4. для однобуквенных имён не подходят l, O, I 
    5. имена должны быть в нижнем регистре, разные слова
       разделяются подчёркиваниями: very_long_variable_name

NoneType - тип, включающее единственное значение None.
None используется для обозначения "пустых", неинициализированных
значений, параметров по умолчанию и т.д.

Способы классификации типов данных:
    -простые и сложные (составные)(массивы, записи, файлы)
    -скалярные и нескалярные (агрегатные типы данных)
    -самостоятельные и зависимые (например, ссылки)

Коллекция - объект, содержащий в себе набор значений одного или
разлиных типов и позволяющий обращаться к этим значениям.

Виды:
    -массив
        -одномерный - вектор
        -двумерный - матрица
        -многомерный
    -список
    -ассоциативный массив, очередь, стек, множество...

Вычислительная сложность - понятие в теории алгоритмов, обозначающее функцию зависимости
объёма работы (по времени или памяти), которая выполняется некоторым алгоритмом,
от размера входных данных:
    -O(n) - линейная
    -O(n^2) - квадратичная
    -O(log n) - логарифмическая
    -O(n * log n)

Сравнение вычислительной сложности работы с массивами и списками:
    -Просмотр всех элементов (поиск) - O(n)
    -Доступ к элементу по индексу - O(1) vs O(n)
    -Вставка O(n) vs O(1)
    -Удаление O(n) vs O(1)

Встроенные структуры данных Python:
    -неизменяемые (immutable)
        -range
        -tuple 
    -изменяемые (mutable)
        -list
        -set 
        -dict

Некоторые понятия ООП:
    * Класс - некоторый шаблон для создания объектов, обеспечивающий начальные
      значения состояния: инициализация полей-переменных и реализация
      поведения методов
    * Объект - это экземпляр класса с собственным состоянием этих свойств
    * Поле - некоторое "свойство", или атрибут, какого-то объекта
      (переменная, являющаяся его частью). Объявляется в классе
    * Метод - функция объекта, которая имеет доступ к его состоянию (полям).
      Реализуется в классе

Псевдослучайные числа - вырабатываемая алгоритмически последовательность чисел, 
обладающих свойствами случайных чисел и используемых взамен последних при решении
на ЭВМ ряда классов задач

Генератор псевдослучайных чисел (ГПСЧ) - алгоритм, порождающий последовательность чисел,
элементы которой почти независимы друг от друга и подчиняются заданному распределению
(обычно равномерному)

Источники случайных чисел - физические шумы (использовать сложно, медленно, дорого)

Недостатки ГПСЧ:
    -повторяемость (периодичность) последовательности
    -зависимость значений

Требования к ГПСЧ:
    -длинный период
    -эффективность
    -воспроизводимость

Матрицы в математике - таблица чисел

Матрицы в программировании - массив массивов (двумерный массив)
(N x M, где N - количество строк, M - количество столбцов)

Отладка - этап разработки компьютерной программы, на котором обнаруживают,
локализуют и устраняют ошибки

При отладке требуется:
    -узнавать текущие значения переменных
    -выяснять, по какому пути выполнялась программа

Способы отладки:
    -Использование отладочной печати
    -Использование отладчика

** Простейший инструмент отладки - отладочная печать (вывод)

Кортеж (tuple) - неизменяемая последовательность

Словари (dict) - неупорядоченные коллекции произвольных объектов
с доступом по ключу. Аналоги в других языках - ассоциативные массивы, хэш-таблицы

Строка - тип данных, значениями которого является произвольная последовательность
символов. Обычно реализуется как массив символов

Изменяемые и неизменяемые типы данных в Python:
    -Неизменяемые (immutable):
        -bool
        -int
        -float
        -tuple
        -str
        -frozenset
    -Изменяемые (mutable):
        -list
        -set
        -dict

Подпрограмма - поименованная или иным образом идентифицированная
отдельная функционально-независимая часть компьютерной программы (функции / процедуры)

Параметры подпрограммы - переменные, которые вызывающая программа 
передаёт подпрограмме

Формальные параметры - те, которые объявлены при описании подпрограммы

Фактические параметры - те, которые передаются в подпрограмму при её вызове

** Присваивание новых значений аргументам внутри функций не затрагивает
   вызывающий код.

Модификация аргумента внутри функции:
    -неизменяемого - создаст копию (не повлияет на вызывающий код)
    -изменяемого - повлияет на вызывающий код (изменит значение в нём)

Виды параметров в Python:
    -позиционные аргументы
    -именованные аргументы

Пространство имён - множество уникальных идентификаторов (имён)

Область видимости - часть программы, в пределах которой идентификатор
остаётся связан с сущностью, которой он был назначен при объявлении

** В Python пространство имён определяется по местоположению
   присваивания этому имени какого-либо значения

Основы областей видимости в Python:
    -имена, присвоенные внутри def, "видны" только в коде внутри этого
     оператора; ссылаться на них извне функции нельзя
    -имена внутри def не конфликтуют с переменными за пределами def

Области видимости:
    1. Глобальная - если переменная объявлена за пределами всех def, 
       то она является "глобальной" в целом файле
    2. Локальная - переменная, объявленная внутри def, будет локальной в своей функции
    3. Нелокальная - переменная, объявленная внутри def, включающем другие def
    4. Встроенная (built-in)

** Оператор global делает имя внутри функции глобальным

** Оператор nonlocal делает имя внутри функции нелокальным

Поиск имени выполняется последовательно в:
    1. local
    2. enclosing (объемлющих) функциях
    3. global
    4. built-in

Рекурсия - вызов подпрограммы из неё же самой:
    -непосредственно - простая рекурсия
    -через другие подпрограммы - косвенная рекурсия

** Тело рекурсивной подпрограммы должно иметь не меньще двух
   альтернативных (условных) ветвей, хотя бы одна из которых 
   должна быть терминальной

Виды рекурсивных вызовов:
    -по количеству вызовов
        -линейная - в теле функции присутствует только один вызов самой себя
        -нелинейная - в теле присутствует несколько вызовов
    -по месту расположения рекурсивного вызова:
        -головная - рекурсивный вызов расположен ближе к началу тела функции
        -хвостовая (концевая) - рекурсивный вызов является последним
         оператором функции

Функция первого порядка - та, которая принимает только значения
"простых" (не функциональных) типов и возвращает значения таких же
типов в качестве результата

Функция высшего порядка - та, которая принимает в качестве аргументов
или возвращает другие функции

Замыкания (closure) в программировании - функция первого класса, в теле которой
присутствуют ссылки на переменные, объявленные вне тела этой функции в окружающем
коде и не являющиеся её параметрами

Аннотации - способ добавлять произвольные метаданные к аргументам функции
и возвращаемому значению

** Оператор lambda создаёт и возвращает объект функции, который будет
   вызываться позднее, не присваивая ему имени
   (lambda arg1, arg2, ...: выражение, использующее аргументы)
   (используется для сокращения кода в тех местах, где включение оператора
    def не разрешено синтаксисом)

Функция map - возвращает итератор, применяющий функцию к каждому элементу
итерируемого объекта

Функция filter - применяет функцию к элементам итерируемого объекта
кумулятивно (накопительно): сначала - к первым двум элементам
(либо к отдельно заданному начальному значению и первому элементу),
далее - к промежуточному результату и очередному значению

Функция zip - Соединяет элементы итерируемых объектов в кортежи

Модуль Python - отдельный файл с кодом, который можно повторно использовать
в других программах

Преимущества модулей:
    -многократное использование кода
    -разбиение пространства имён системы
    -реализация разделяемых служб или данных

Вставка элемента в массив:
    1. Увеличение длиныв массива на 1
    2. Сдвиг элементов массива на 1 вправо
    3. Вставка нового элемента

Удаление элемента из массива:
    1. Сдвиг элементов на 1 влево с перезаписью удаляемого элемента
    2. Уменьшение длины на 1

Знак "_" в Python:
    -хранение значения последнего выражения в интерпретаторе
    -игнорирование некоторых значений (при разыменовании кортежей и т.д.)
    -задание специальных значений для имён переменных или функций
     (_name, __name, __name__)

Декоратор - это функция, которая позволяет обернуть другую функцию
для расширения её функциональности без непосредственного изменения её кода

Синтаксические ошибки - ошибки интерпретации исходного текста
программы при её запуске. Наличие синтаксических ошибок не позволит
программе запуститься

Ошибки времени выполнения (исключения) - ошибки, возникающие в 
процессе выполнения программы: деление на 0, некорректное обращение
к типам данных, ошибки при работе с различными объектами, в том числе файлами и т.д

Исключения - тип данных, позволяющий классифицировать ошибки и обрабатывать их.

** В процессе обработки одного исключения может произойти (или быть
   выброшено через raise) другое исключение, так, что обработка исключений
   будет выполняться по цепочке

** В ЯП обычно применяется концепция, в которой 
   файл является абстракцией, не привязанной к конкретному типу носителя
   и файловой системе, а работа с файлами осуществляется подобно обработке массива данных

** Однако, в зависимости от технических возможностей, ряд файлов
   поддерживает произвольный доступ, а остальные - только последовательный

Виды файлов:
    -текстовые файлы
    -структурированные (типизированные) форматы
    -бинарные файлы

** Формат файла определяется его содержимым. Расширение файла обычно
   соответствует формату файла, но в общем случае никак на него не повлияет

Файловый дескриптор - целое число, которое присваивается операционной системе
каждому потоку ввода-вывода при его создании

bytes and bytearray - классы для представления бинарных данных, "байтовые строки"

** Набор операторов и методов похож на аналогичный у обычных строк

Декомпозиция - разделение задачи на множество частных задач, не
превосходящих по совокупной сложности исходную

** Один из способов декомпозиции - использование подпрограмм

Подпрограммы необходимо использовать для:
    -уменьшения дублирования кода
    -возможности повторного использования кода в других программах
    -упрощения отладки

Регулярные выражения - формальный язык поиска и модификации
подстрок в тексте, основанные на использовании метасимволов

** Жадный режим поиска найдёт первый самый длинный фрагмент
   текста, удовлетворяющий выражению

** Ленивый режим поиска найдёт первый самый короткий фрагмент

Разновидности регулярных выражений:
    -базовые регулярные выражения POSIX
    -расширенные регулярные выражения POSIX
    -регулярные выражения, совместимые с Perl

hex viewer and hex editor - программы для просмотра (редактирования) 
данных (файлов) в "сыром" (raw) виде - как последовательность байтов, в 16-ричной с.с

"""
